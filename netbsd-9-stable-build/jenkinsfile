pipeline {
    agent {label 'src-builder'}

    environment {
        src         = "/usr/src"
        xsrc        = "/usr/xsrc"
        obj         = "/usr/obj"
        tools       = "/usr/tools"
        releases    = "${obj}/releasedir/amd64/binary"
        branch      = "netbsd-9"
        build_cmd   = "./build.sh -O ${obj} -T ${tools} -X ${xsrc} -x -N0 -j6 "
    }

    stages {
        stage('Checkout trunk') {
            steps {
                script {
                    sources = ["${src}", "${xsrc}"]
                    sources.each { source ->
                        dir(source) {
                            sh("hg checkout ${branch}")
                            sh("hg pull && hg update")
                        }
                    }
                }
            }
        }
        stage('Build tools') {
            steps {
                dir(src){
                    sh("${build_cmd} tools")
                }
            }
        }
        stage('Build GENERIC kernel') {
            steps {
                dir(src) {
                    sh("${build_cmd} kernel=GENERIC")
                    sh("${build_cmd} releasekernel=GENERIC")
                }
            }
        }
        stage('Build distribution') {
            steps {
                dir(src) {
                    sh("${build_cmd} distribution")
                }
            }
        }
        stage('Build sets') {
            steps {
                dir(src) {
                    sh("${build_cmd} sets")
                }
            }
        }
        stage('Publish releases') {
            environment {
                version = sh(script: "sh ${src}/sys/conf/osrelease.sh", returnStdout: true).trim()
                machine = sh(script: "uname -m", returnStdout: true).trim()
                www     = "/var/www/netbsd/${version}/${machine}/binary"
            }
            steps {
                sh("mkdir -p ${www}/sets ${www}/kernel")
                sh("cp ${releases}/sets/* ${www}/sets")
                sh("cp ${releases}/kernel/* ${www}/kernel")
            }
        }
    }
}
